<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://albuswhite.github.io/blog/"/>
  <updated>2019-10-30T06:15:11.351Z</updated>
  <id>http://albuswhite.github.io/blog/</id>
  
  <author>
    <name>White Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Recent</title>
    <link href="http://albuswhite.github.io/blog/2019/10/30/recent/"/>
    <id>http://albuswhite.github.io/blog/2019/10/30/recent/</id>
    <published>2019-10-30T06:15:11.351Z</published>
    <updated>2019-10-30T06:15:11.351Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="529b8845b43387b4ff9fc16ea9693b995fffda98795fbd94efff4b0897aac93e">5000957d6e1b9f1e1aefeb5b06572c83340c50114f95652081ccc155dbfbd3910b07fa60429a8554c5cd294a245965169a021785cc4bbb6194b9aaa71a8826801e08a887634a40493d105a31451ecbfb8b0d0160f34ea90d3fdcb21ee97d94b13014cd7834e350a31efb456f9a6db808911815252e460ed949ba161fa967041ee17687bd59cbb0385f54dfa409e4c4a849792ff02506245b9d6e09a33f6710e03bd2b55d58a43d91c4cf1c10e90767b67d22cee010b524639fbd867c34673e88ccf904c2832c45b0b955e629f79bcbd3ac3c7a7c2ae59b2633c92892167c6fb3dfed57a0f6d0ca15863d0d9209c4020359549c036f11040acef1d8228cc479d8bdae1b3f80b006f702a8d6099100fb365cbe7c5770dfd311c565393c3feb0b30a90342b72d7b5fed2212795e4bcb3a681b3a6f5178490c398db329cfe0fda642d299b579996824c5cc93217737fb800162eb9e9f6261bdeb3e5f82a196004ee5951a49a89182c030f47f111f01feeda05ad8fc604a7b4ad61c89f4d1ca28cff3b9b06d6ef98e6be6d05892bcff459ff9fe8f3be6ce53ccb3234b64773110432d834f27dc788c9e5a64b148e74d1125229d56ea4e86fd9d9d1c04855220e279edc09dc2063cca3c5a8fca7fd94a498441abe4202bd243f76980a519bee0503e62a59707929c97c75d8dd9f91c7d9ebfec2cbf87f02687bebe9068c06e941153ad2bc767ebb740434d597aeac5daa64b9062a8fee6ccfb44c2ad6c6d1757e3237ae92e601b50769c7af64867df826a0569226f6cb9b03697c7483daa9bb02b00126baeadc41aa5435168ce4fb7e8b8c5f51ced7cba9790ef6ebed2807c21a04ae853df33013f6b09120e045aacf55fb97553e89ad5efcb9d37de479c2479f672d975cc09ce37891d1437e4c83ddfb49afd19a95503ef0bd0e55c3da633559180e4d2245a1838fd09d34749d929ed6a2a4d0360a34762f30e9780fdc95970f01b78b35d6bee7fbdbf11020f02cd606ee2d8516fcd54254382045d4915c458650ac279e98c25b8f34197fd9bcf7e633ef20bb153faa14a14eea77959531c10bb7f82e1dbbb3021e14ca57a061b853265aedf</script></div><script src="/blog/lib/blog-encrypt.js"></script><link href="/blog/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="daily" scheme="http://albuswhite.github.io/blog/categories/daily/"/>
    
    
      <category term="daily" scheme="http://albuswhite.github.io/blog/tags/daily/"/>
    
  </entry>
  
  <entry>
    <title>Java Summary</title>
    <link href="http://albuswhite.github.io/blog/2019/10/30/Summary/"/>
    <id>http://albuswhite.github.io/blog/2019/10/30/Summary/</id>
    <published>2019-10-30T03:25:05.559Z</published>
    <updated>2019-10-30T03:25:05.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Week-1-2"><a href="#Week-1-2" class="headerlink" title="Week 1-2"></a>Week 1-2</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><h3 id="process-and-thread"><a href="#process-and-thread" class="headerlink" title="process and thread"></a>process and thread</h3><p>线程是进程中的⼀个实体，是被系统独⽴调度和分派的基本单位，线程⾃⼰不拥有系统资源，只拥有⼀点在运⾏中必不可少的资源，但它可与同属⼀个进程的其它线程共享进程所拥有的全部资源。⼀个线程可以创建和撤消另⼀个线程，同⼀进程中的多个线程之间可以并发执⾏。线程有就绪、阻塞和运⾏三种基本状态。</p><a id="more"></a><h4 id="Describe-the-TWO-main-differences-between-a-process-and-a-thread"><a href="#Describe-the-TWO-main-differences-between-a-process-and-a-thread" class="headerlink" title="Describe the TWO main differences between a process and a thread."></a>Describe the TWO main differences between a process and a thread.</h4><p>Difference 1<br>A process is isolated, has its own independent memory and it is associated with a single application; e.g. think of Window’s task manager.<br>All threads exist within one process and share the same memory</p><p>Difference 2<br>A thread can be thought of as a ‘light weight’ process; it is ususally used for small tasks.<br>Processes are used for more ‘heavy weight’ tasks; usually, to execute applications.</p><h3 id="States-and-Method"><a href="#States-and-Method" class="headerlink" title="States and Method"></a>States and Method</h3><p>ready-to-run, sleeping, waiting, running, blocked</p><p>run, yield, sleep, wait, notify, and notifyAll</p><h4 id="Relationship"><a href="#Relationship" class="headerlink" title="Relationship"></a>Relationship</h4><p>When a thread is constructed and the <strong>start()</strong> method called, it is ready-to-run(but may not be running because it is waiting for a place on the CPU).</p><p>A thread is put to sleep by the <strong>sleep</strong> command, and afer the amout of time specified in the parameter it returns to ready-to-run state.</p><p>The <strong>yield</strong> command takes the thread in the running state and moves it to the ready-to-run state.</p><p>A thread can be moved to the waiting state by the <strong>wait</strong> command, and it returns to a ready-to-run state by the <strong>notify</strong> and <strong>notifyAll</strong> commands.</p><p>The <strong>run</strong> command operates on a thread in the ready-to-run state, and when it is finished the thread moves to the dead state.</p><h3 id="two-possible-ways-to-create-a-thread"><a href="#two-possible-ways-to-create-a-thread" class="headerlink" title="two possible ways to create a thread"></a>two possible ways to create a thread</h3><p>Method 1: Extend the Thread class<br>Method 2: Implement the Runnable interface<br>Generally developers recommend the implementing the Runnable interface, rather than the extending the Thread class.<br>This is because you can implement many interfaces, but you can only extend one class in Java.</p><h4 id="benefit-of-implementing-a-thread-using-the-Runnable-interface-rather-than-extending-the-Thread-class"><a href="#benefit-of-implementing-a-thread-using-the-Runnable-interface-rather-than-extending-the-Thread-class" class="headerlink" title="benefit of implementing a thread using the Runnable interface, rather than extending the Thread class?"></a>benefit of implementing a thread using the Runnable interface, rather than extending the Thread class?</h4><p>If you implement Runnable, the class will be able to extend another class.<br>If you extend Thread, you will not be able to extend any other class because Java only allows a class to extend one other class.</p><h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h3><h4 id="中断-interrupt"><a href="#中断-interrupt" class="headerlink" title="中断(interrupt)"></a>中断(interrupt)</h4><p>t.interrupt()不会中断正在执行的线程，只是将线程的标志位设置成true。但是如果线程在调用sleep(),join(),wait()方法时线程被中断，则这些方法会抛出InterruptedException，在catch块中捕获到这个异常时，线程的中断标志位已经被设置成false了，因此在此catch块中调用t.isInterrupted(),Thread.interrupted()始终都为false,<br>而t.isInterrupted与Thread.interrupted()的区别是:<br>Thread.interrupted()<br>检查是否发生中断.Thread.interrupted()能告诉你线程是否发生中断,并将清除中断状态标记，所以程序不会两次通知你线程发生了中断．<br>t.isInterrupted<br>测试线程是否已经中断。线程的中断状态不受该方法的影响。 </p><h4 id="What-is-interrupt-signal-How-is-an-interrupt-signal-represented-internally-in-the-Thread-class"><a href="#What-is-interrupt-signal-How-is-an-interrupt-signal-represented-internally-in-the-Thread-class" class="headerlink" title="What is interrupt signal? How is an interrupt signal represented internally in the Thread  class?"></a>What is interrupt signal? How is an interrupt signal represented internally in the Thread  class?</h4><p>An interrupt signal is a signal to a thread. to stop doing what it is doing.<br>It is represented as a <strong>Boolean</strong> variable.</p><h4 id="Four-ways-in-which-a-thread-can-be-terminated"><a href="#Four-ways-in-which-a-thread-can-be-terminated" class="headerlink" title="Four ways in which a thread can be terminated"></a>Four ways in which a thread can be terminated</h4><ol><li>In the catch statement, the interrupted() method could be called again to set the interrupt signal back to true. The thread would then naturally terminate.</li><li>The code could be changed so that the Interrupted Exception is caught by the GeneralInterrupt thread and this triggers an immediate return, terminating the thread.</li><li>The thread could be set to a daemon thread. It wil be automatically terminated by Java when the main thread completes.</li><li>Another Boolean variable could be used that be changed by other threads.</li></ol><h3 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h3><h4 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h4><p>Volatile is used to indicate that a variable’s value will be modified by different thread.<br>只有primitive variable 可以被声明为volatile,不适合复杂操作(意思是类,数组,借口这种变量不可被声明 )<br>e.g. public volatile int counter=0; 用法像final</p><h4 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h4><p>Synchronized means that <strong>getNextValue()</strong> can only be access by one thread at a time (surrounds the method with a lock)<br>e.g. public synchronzied int getNextValue(){ }<br>如果一个程序里有2个method 有 synchronized 关键词, 那么在同一时间只有1个被executed</p><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><h5 id="Intrinsic-lock"><a href="#Intrinsic-lock" class="headerlink" title="Intrinsic lock"></a>Intrinsic lock</h5><p>when a thread has a lock, no other thread can acquire it.(It must wait for the first thread to release the lock)</p><h5 id="monitor-lock"><a href="#monitor-lock" class="headerlink" title="monitor lock"></a>monitor lock</h5><p>mutual exclusion(synchronized): only allows one thread to execute a part of code at a given time.<br>cooperation(wait( ) and notify( )): enable threads to work together.</p><h5 id="Deadlock"><a href="#Deadlock" class="headerlink" title="Deadlock"></a>Deadlock</h5><p>two or more threads waiting for two or more loclks to be freed, and the circumstances in the program is such that the locks will never be freed.</p><h4 id="Multithreading"><a href="#Multithreading" class="headerlink" title="Multithreading"></a>Multithreading</h4><p>The most common multithreading issues are Race Conditions and Deadlocks.</p><h5 id="race-condition"><a href="#race-condition" class="headerlink" title="race condition"></a>race condition</h5><p>A race condition occurs when two or more threads can access shared data and they try to change it at the same time, but you don’t know the order in which the threads will attempt to access the shared data.</p><h5 id="Briefly-describe-the-main-difficulties-faced-by-software-developers-when-producing-multithreaded-code"><a href="#Briefly-describe-the-main-difficulties-faced-by-software-developers-when-producing-multithreaded-code" class="headerlink" title="Briefly describe the main difficulties faced by software developers, when producing multithreaded code."></a>Briefly describe the main difficulties faced by software developers, when producing multithreaded code.</h5><p>With TCP, there is absolute guarantee that the data transferred remains intact and arrives in the same order in which it was sent<br>With UDP, there is no guarantee that the messages or packets sent would reach at all.</p><h4 id="critical-piece"><a href="#critical-piece" class="headerlink" title="critical piece"></a>critical piece</h4><p>A critical piece of code is one where two threads execute the code at the same time but the code is not thread-safe which can cause e.g, data to become unsynchronized.</p><h5 id="Indicate-the-Java-keyword-that-is-used-to-protect-a-critical-piece-of-code"><a href="#Indicate-the-Java-keyword-that-is-used-to-protect-a-critical-piece-of-code" class="headerlink" title="Indicate the Java keyword that is used to protect a critical piece of code."></a>Indicate the Java keyword that is used to protect a critical piece of code.</h5><p>The synchronized keyword is used to protect a critical piece of code.</p><h5 id="If-two-threads-attempt-to-access-a-critical-piece-of-code-one-of-the-threads-will-be-successful-and-execute-the-code-In-this-scenario-indicate-what-will-happen-to-the-second-thread"><a href="#If-two-threads-attempt-to-access-a-critical-piece-of-code-one-of-the-threads-will-be-successful-and-execute-the-code-In-this-scenario-indicate-what-will-happen-to-the-second-thread" class="headerlink" title="If two threads attempt to access a critical piece of code, one of the threads will be successful and execute the code. In this scenario, indicate what will happen to the second thread."></a>If two threads attempt to access a critical piece of code, one of the threads will be successful and execute the code. In this scenario, indicate what will happen to the second thread.</h5><p>In this scenario, the second thread will go into a blocked state.</p><h3 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP/UDP"></a>TCP/UDP</h3><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><h5 id="A-port-number-is-provided-when-setting-up-a-socket-connection-Valid-port-numbers-are-in-the-range-0–65536-but-you-should-not-use-ports-in-the-range-0–1024-Explain-why-that-is-the-case"><a href="#A-port-number-is-provided-when-setting-up-a-socket-connection-Valid-port-numbers-are-in-the-range-0–65536-but-you-should-not-use-ports-in-the-range-0–1024-Explain-why-that-is-the-case" class="headerlink" title="A port number is provided when setting up a socket connection. Valid port numbers are in the range 0–65536, but you should not use ports in the range 0–1024. Explain why that is the case."></a>A port number is provided when setting up a socket connection. Valid port numbers are in the range 0–65536, but you should not use ports in the range 0–1024. Explain why that is the case.</h5><p>Ports in the range 0-1024 are reserved ports and so should only be used for these established services</p><p>e.g.</p><ul>    <li> Web servers(HTTP) on port 80 </li>    <li> Encrypted web servers(HTTPS) on port 443 </li>    <li> Secure SHell(SSH) on port 22 </li>    <li> File Transfer Protocol(SMTP) on ports 20 and 21 </li>    <li> Simple Mail Transfer Protocol(SMTP) on port 25</li>    </ul><h5 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h5><ol><li><p>HTTPS is secure </p></li><li><p>HTTPS is the same as HTTP but runs over TLS </p></li><li><p>HTTPS uses port  443</p></li><li><p>All headers are encrypted</p></li><li><p>All payloads are encrypted</p></li></ol><h4 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h4><p>这个去年有考,但现在ppt上没有,先不写了.</p><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><ol><li>The server instantiates a ServerSocket object, denoting which port number communication is to occur on.</li><li>The server invokes the accept() method of the ServerSocket class.</li><li>This method waits until a client connects to the server.</li><li>While the server is waiting, a client instantiates a Socket object, specifying the server name and the port number to connect to.</li><li>The constructor of the Socket class attempts to connect the client to the specified server and the port number. If communication is established, the client now has a Socket object capable of communicating with the server.</li><li>On the server side, the accept() method returns a reference to a new socket on the client that is connected to the client socket.</li></ol><h5 id="When-you-open-a-stream-you-should-always-close-it-when-you-have-finished-Briefly-explain-this-statement"><a href="#When-you-open-a-stream-you-should-always-close-it-when-you-have-finished-Briefly-explain-this-statement" class="headerlink" title="When you open a stream, you should always close it when you have finished. Briefly explain this statement."></a>When you open a stream, you should always close it when you have finished. Briefly explain this statement.</h5><p>In general, a stream is an expensive resource on a computer. This could be a stream over the internet, which is expensive to maintain, and these resources are limited and may prevent more connections</p><h5 id="Indicate-how-you-can-ensure-that-a-stream-is-always-closed-after-use-even-when-an-error-has-occurred"><a href="#Indicate-how-you-can-ensure-that-a-stream-is-always-closed-after-use-even-when-an-error-has-occurred" class="headerlink" title="Indicate how you can ensure that a stream is always closed after use, even when an error has occurred."></a>Indicate how you can ensure that a stream is always closed after use, even when an error has occurred.</h5><p>If an error occurs, you should surround it with a try-catch block, but you can also add any code you need in the event of an error and put it in a finally block.</p><h5 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h5><p>The <strong>ping</strong>  command sends 4 packets of data, in 32 types; it tells us:</p><ol><li>The IP address of the server that we are sending the ping command to.</li><li>The round trip time of each packet.</li><li>Other statistics, e.g. minimum and maximum times are average times.</li></ol><h2 id="Front-end"><a href="#Front-end" class="headerlink" title="Front end"></a>Front end</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><p><img src="http://blog.albuswhite.com.cn/html%E4%BB%A3%E7%A0%81.png" alt="html常用代码"><br>列表 : 有序列表 <code>&lt;ol&gt; -- &lt;li&gt;</code><br>           无序列表 <code>&lt;ul&gt; -- &lt;li&gt;</code><br>表格: <code>&lt;table&gt;</code><br>标题  <code>&lt;th&gt;</code>       会出现加粗效果<br>行      <code>&lt;tr&gt;</code><br>列      <code>&lt;td&gt;</code></p><h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><p>这里把form单独拿出来讲下,因为这个东西没用且垃圾.但是喜欢考,历史的车轮滚滚向后.</p><p><code>&lt;form onSubmit=&quot;return onSubmitFullName()&quot; name=&quot;bankForm&quot; method=&quot;post&quot; action=&quot;./createAccount.html&quot;&gt;</code><br>   <code>First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot;&gt;&lt;br/&gt;</code><br>   <code>Last name : &lt;input type=&quot;text&quot; name=&quot;lastname&quot;&gt;&lt;br/&gt;&lt;br/&gt;</code><br>   <code>Preferred Username: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br/&gt;</code><br>   <code>Preferred Password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br/&gt; &lt;br/&gt;</code><br>   <code>Type of account to open:</code></p><p><code>&lt;select name=&quot;accountType&quot;&gt;</code><br>   <code>&lt;option value=&quot;current&quot; selected=&quot;selected&quot;&gt;Current&lt;/option&gt;</code><br>   <code>&lt;option value=&quot;savings&quot;&gt;Savings&lt;/option&gt;</code><br>   <code>&lt;/select&gt;</code><br>   <code>&lt;br/&gt;&lt;br/&gt;</code><br>   <code>&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</code><br><code>&lt;/form&gt;</code></p><p>这是上面那段代码的效果, 按下submit按钮,会使用post方法向createAccount.html发送函数onSubmitFullName()的结果</p><form onsubmit="return onSubmitFullName()" name="bankForm" method="post" action="./createAccount.html">    First name: <input type="text" name="firstname"><br>     Last name : <input type="text" name="lastname"><br><br>     Preferred Username: <input type="text" name="user"><br>     Preferred Password: <input type="password" name="password"><br> <br>     Type of account to open:<select name="accountType">    <option value="current" selected="selected">Current</option>     <option value="savings">Savings</option>     </select>    <br><br>     <input type="submit" value="Submit"> </form><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ol><li>The alert( ) function can be used to display text to the user in a web page.</li><li>A function is a reusable piece of JavaScript code that performs a common task.</li><li>var  is the JavaScript keyword used to create a variable.</li><li>In JavaScript, 3.14, 11 and 120 are examples of values of the number data type.</li><li>The JavaScript data type text is used to store characters and strings.</li><li>In JavaScript, we can use the parseInt( ) function to convert a string to an integer value.</li><li>An event handler is a command that JavaScript uses to deal with actions performed by the user while visiting a webpage; onChange and onClick are both examples of this.   </li></ol><h4 id="跳转页面"><a href="#跳转页面" class="headerlink" title="跳转页面"></a>跳转页面</h4><p>window.location.href = “votingSuccessful.html”;</p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>dom太复杂了,我也不知道从哪里讲起,暂时先列一下出现过的dom操作吧</p><ol><li><p><code>document.forms[&quot;filmVoting&quot;].fav_film.value;</code><br>这指的是叫做“filmVoting”的form其中name=“fav_film”那个标签的值.</p></li><li><p><code>document.bankForm.firstName.value</code><br>这个和上一个差不多,不过这个直接用了bankForm指向那个name=”bankForm”的form</p></li><li><p><code>document.write</code><br> 这个句子更傻逼了,就是在页面的最后加内容.</p></li></ol><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><h5 id="使用-JavaScript-创建Cookie"><a href="#使用-JavaScript-创建Cookie" class="headerlink" title="使用 JavaScript 创建Cookie"></a>使用 JavaScript 创建Cookie</h5><p>document.cookie=”username=John Doe; expires= Thu, 18 Dec 2013 12:00:00 GMT; path=/“;</p><p>后面是过期时间和路径,暂时没看到有考</p><h5 id="使用-JavaScript-读取-Cookie"><a href="#使用-JavaScript-读取-Cookie" class="headerlink" title="使用 JavaScript 读取 Cookie"></a>使用 JavaScript 读取 Cookie</h5><p>var x=document.cookie;</p><h5 id="使用-JavaScript-修改-Cookie"><a href="#使用-JavaScript-修改-Cookie" class="headerlink" title="使用 JavaScript 修改 Cookie"></a>使用 JavaScript 修改 Cookie</h5><p>document.cookie=”username=John Doe; expires= Thu, 18 Dec 2013 12:00:00 GMT; path=/“;</p><p>其实就是覆盖</p><h5 id="使用-JavaScript-删除-Cookie"><a href="#使用-JavaScript-删除-Cookie" class="headerlink" title="使用 JavaScript 删除 Cookie"></a>使用 JavaScript 删除 Cookie</h5><p>document.cookie = “username=; expires=Thu, 01 Jan 1970 00:00:00 GMT”;</p><p>本质是把过期时间设置为过去.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Week-1-2&quot;&gt;&lt;a href=&quot;#Week-1-2&quot; class=&quot;headerlink&quot; title=&quot;Week 1-2&quot;&gt;&lt;/a&gt;Week 1-2&lt;/h1&gt;&lt;h2 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h2&gt;&lt;h3 id=&quot;process-and-thread&quot;&gt;&lt;a href=&quot;#process-and-thread&quot; class=&quot;headerlink&quot; title=&quot;process and thread&quot;&gt;&lt;/a&gt;process and thread&lt;/h3&gt;&lt;p&gt;线程是进程中的⼀个实体，是被系统独⽴调度和分派的基本单位，线程⾃⼰不拥有系统资源，只拥有⼀点在运⾏中必不可少的资源，但它可与同属⼀个进程的其它线程共享进程所拥有的全部资源。⼀个线程可以创建和撤消另⼀个线程，同⼀进程中的多个线程之间可以并发执⾏。线程有就绪、阻塞和运⾏三种基本状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://albuswhite.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="http://albuswhite.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java Socket</title>
    <link href="http://albuswhite.github.io/blog/2019/10/30/Java%20Socket/"/>
    <id>http://albuswhite.github.io/blog/2019/10/30/Java Socket/</id>
    <published>2019-10-30T03:23:05.185Z</published>
    <updated>2019-10-30T03:23:05.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>端口,IP之类这里就不讲了.小学期大家都做过.<br>接下来说的都会按照课件最后一个多线程demo来讲<br> <a id="more"></a></p><h3 id="Socket的通信地址"><a href="#Socket的通信地址" class="headerlink" title="Socket的通信地址"></a>Socket的通信地址</h3><p>InetAddress是java封装好的函数,主要可以用作获取ip,用户名等.<br>e.g:<br><code>InetAddress address = InetAddress.getLocalHost();</code><br><code>System.out.println( address.getHostName());          //本机用户名</code><br><code>System.out.println( address.getHostAddress());       //本机ip</code></p><p>这里用了null, 那就会获取默认的 localhost/127.0.0.1<br><code>InetAddress addr = InetAddress.getByName(null)</code></p><h3 id="Socket通信过程"><a href="#Socket通信过程" class="headerlink" title="Socket通信过程"></a>Socket通信过程</h3><p><img src="http://blog.albuswhite.com.cn/socket%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B.png" alt="Socket通信模型"></p><ol><li>创建ServerSocket和Socket</li><li>打开连接到Socket的输入/输出流</li><li>按照协议对Socket进行读/写操作</li><li>关闭输入输出流,关闭Socket</li></ol><h4 id="Sever端"><a href="#Sever端" class="headerlink" title="Sever端"></a>Sever端</h4><ol><li>创建ServerSocket对象,绑定监听端口</li></ol><p><code>ServerSocket s = new ServerSocket(PORT);</code></p><ol start="2"><li>通过accept( )方法监听客户端请求</li></ol><p><code>Socket socket = s.accept();</code></p><ol start="3"><li>连接建立后,通过输入流读取客户端发送的请求信息</li></ol><p><code>in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</code><br><code>String str = in.readLine();</code><br>  注: BufferReader是缓冲读取</p><ol start="4"><li>通过输出流向客户端发送相映信息</li></ol><p><code>out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);</code><br><code>out.println(str);     // 在输出流中写入数据</code></p><ol start="5"><li>关闭相关资源</li></ol><p><code>socket.close();</code></p><h4 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h4><ol><li><p>创建Socket对象,指明需要连接的服务器的地址和端口</p><p><code>socket = new Socket(addr, PORT);</code></p></li><li><p>连接建立后,通过输出流向服务器端发送请求信息</p><p><code>out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())), true);</code><br>注: 这个true是自动清空缓冲区的意思 </p><p><code>out.println(&quot;Client &quot; + id + &quot;: &quot; + i);</code></p></li></ol><ol start="3"><li><p>通过输入流获取服务器响应的信息</p><p><code>in = new BufferedReader(new InputStreamReader(socket.getInputStream())) ;</code><br><code>String str = in.readLine();     //读取响应信息</code></p></li><li><p>关闭相关资源</p><p><code>socket.close();</code></p></li></ol><h4 id="多线程实现多客户端"><a href="#多线程实现多客户端" class="headerlink" title="多线程实现多客户端"></a>多线程实现多客户端</h4><ol><li>服务器创建ServerSocket, 循环调用accept( )等待客户端连接</li><li>客户端创建一个socket并请求和服务器端连接</li><li>服务器端接受客户端请求,创建socket与该客户建立专线联系</li><li>建立连接的两个socket在一个单独的线程上对话</li><li>服务器端继续等待新的连接</li></ol><p>具体代码解释我就不写了,本质就是客户端多线程.<br>demo代码利用了Client的多线程模拟多个客户连接服务端, 服务端用多线程实现了多个连接</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Socket&quot;&gt;&lt;a href=&quot;#Socket&quot; class=&quot;headerlink&quot; title=&quot;Socket&quot;&gt;&lt;/a&gt;Socket&lt;/h2&gt;&lt;p&gt;端口,IP之类这里就不讲了.小学期大家都做过.&lt;br&gt;接下来说的都会按照课件最后一个多线程demo来讲&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://albuswhite.github.io/blog/categories/Java/"/>
    
    
      <category term="Java" scheme="http://albuswhite.github.io/blog/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Words</title>
    <link href="http://albuswhite.github.io/blog/2019/10/15/Words/"/>
    <id>http://albuswhite.github.io/blog/2019/10/15/Words/</id>
    <published>2019-10-15T15:38:55.864Z</published>
    <updated>2019-10-15T15:38:55.864Z</updated>
    
    <content type="html"><![CDATA[<ol><li>elephantine 巨大的</li><li>ubiquity 笨拙的，无所不在的</li><li>promise 前途，预示</li><li>gainsay 否定，反驳</li><li>sterling 高质量的</li><li>ad hoc 特别的</li><li>anonymous 匿名的 不出名的</li><li>evenhanded 公平的</li><li>confessional 自白的</li><li>amplify 详细阐述，夸大<a id="more"></a></li><li>particularize 详细阐述</li><li>encase 围绕</li><li>fleeting 短暂的</li><li>incompatible 不可兼容的</li><li>cluster 堆</li><li>stratify 分层级的</li><li>innocuous 无害的，平淡的</li><li>overture 序曲</li><li>bleak 暗淡的</li><li>belie 掩饰，证明。。虚假</li><li>undercut 削弱</li><li>prefigure 预示</li><li>entail 包含</li><li>coincident 一致的，同时发生的</li><li>hack 砍</li><li>generic 通用的，普通的</li><li>inclusive 广泛的</li><li>proprietary 私有的</li><li>impenetrable 难懂的， 无法穿透的，冷漠麻木的</li><li>didactic 过分说教的</li><li>paradox 矛盾</li><li>cosmopolitan 世界性的，国际的</li><li>capricious 变化多端的</li><li>mercenary 唯利是图的</li><li>intransigent 不让步的</li><li>scathing 尖酸刻薄的</li><li>satirize 讽刺，挖苦</li><li>abhor 厌恶</li><li>relish 享受</li><li>enchanting 迷人的</li><li>flout 蔑视的</li><li>subvert 颠覆，破坏</li><li>palpable 可感知的，明显的</li><li>temperate 温和的</li><li>delegates 委托于</li><li>ascribe 归因于</li><li>sophisticated 复杂的，富有经验的</li><li>consensus 意见一致的</li><li>compunction 后悔感</li><li>dichotomy 矛盾</li><li>untenable 站不住脚的</li><li>bypass 绕过</li><li>magnify 放大</li><li>circumvent 绕过</li><li>evanescent                                         短暂的</li><li>demise 死亡</li><li>transient 短暂的</li><li>decay 衰退</li><li>deteriorate 恶化</li><li>conspicuous 明显的</li><li>intriguing 非常有趣的</li><li>trifling 不重要的</li><li>deleterious 有害的</li><li>deceptive 欺骗性的</li><li>plastic 可以适应的</li><li>potency 能力，权力</li><li>encumber 阻碍</li><li>replete 充满的</li><li>discretionary 自由决定的</li><li>bureaucracy 管理机构</li><li>skirt 回避</li><li>scrutinize 详细检查</li><li>counter 反驳</li><li>revelation 揭露</li><li>stigma 污点</li><li>allure 引诱</li><li>blemish 玷污</li><li>inveterate 一贯的</li><li>intercept 拦截</li><li>oblige 迫使</li><li>suffocate 阻碍</li><li>monitor 监控</li><li>commend 称赞</li><li>weird 奇怪的</li><li>shackle 阻碍</li><li>admonish 警告</li><li>hazardous 危险的</li><li>momentous 重要的</li><li>precarious 处境危险的</li><li>stagnate 停滞</li><li>rigid 僵硬的</li><li>repudiate 否认</li><li>recant 否认</li><li>neural 中立的</li><li>betray 背叛</li><li>expel 驱逐</li><li>endorse 公开支持</li><li>oust 驱逐</li><li>sanction 支持</li><li>discrete 离散的</li><li>irascibility 易怒的</li><li>confused 混乱的</li><li>perfunctory 不走心的</li><li>overt 明显的</li><li>exacting 要求高的，费力的</li><li>ballyhoo 大肆宣传</li><li>quip 机智幽默的评论</li><li>pensive 思考的</li><li>droll 古怪的</li><li>stoicism 淡泊</li><li>hectic 非常忙碌分</li><li>demanding 费力的</li><li>dilatory 拖拉的</li><li>averse 反感的</li><li>empiricism 基于观察和实验</li><li>utilitarian 实用的，功利的</li><li>parochial 狭隘的</li><li>irk 使…厌烦</li><li>flippancy 轻率无礼</li><li>subtle 灵巧的</li><li>discursive 经推论而得的</li><li>sabotage 破坏</li><li>acquiesce 默许</li><li>intractable 难驾驭的</li><li>veneration 尊敬</li><li>detestation 憎恶</li><li>grant  承认，授予，允许</li><li>obsequious 谄媚的</li><li>discreet 谨慎的</li><li>refute 反驳</li><li>defy 不遵守</li><li>rosy 乐观的</li><li>encomium 赞美</li><li>tribute 赞美</li><li>nullify 使无效</li><li>daunting 难以处理</li><li>placid 平静的</li><li>forbidding 阻挠的</li><li>taxing 繁重的，劳累的</li><li>circumscribe 限制</li><li>onerous 繁重的</li><li>multifarious 各种各种的</li><li>confine 限制</li><li>proscribe 禁止</li><li>inhibit 抑制</li><li>supersede 淘汰</li><li>hinder 阻碍</li><li>taint 败坏，污染</li><li>profound 深刻的</li><li>marginal       边缘的</li><li>absurd          荒谬的</li><li>apt               合适的，有倾向的，聪明的</li><li>anchor 使…稳定</li><li>tenuous 薄弱的</li><li>outrage 使…生气</li><li>captives 吸引</li><li>cynical  怀疑他人动机不纯的</li><li>provocative   引起争论的/思考的</li><li>fray 使紧张，急躁</li><li>bewilder 使..困惑</li><li>assault 攻击</li><li>lucid 清晰的，透明的</li><li>volatile 性格多变的</li><li>forbear 克制，忍耐</li><li>authorization 独裁主义的</li><li>contentious 引起争议的，爱争吵的</li><li>paradigm 典范</li><li>mercenary 唯利是图的</li><li>compelling 有趣的，有说服力的</li><li>esoteric   难懂的</li><li>pedestrian  平凡普通的</li><li>speculation 猜测</li><li>extraneous 无关的</li><li>demonstrable  可证明的</li><li>transcendent 超然的，卓然的</li><li>aver  声称</li><li>feign 假装，伪装</li><li>avow  承认</li><li>lopsided 不均衡的</li><li>feeble 衰弱的</li><li>robust 强壮的</li><li>turbulent 混乱的</li><li>lethargic 漠不关心的</li><li>fervor 热情</li><li>hybrid 混合物</li><li>indiscriminate 不加区分的</li><li>conciliate 安慰</li><li>exhaustive 全面</li><li>glib 油嘴滑舌的</li><li>veracious 真实的</li><li>vivacious 活力四射的</li><li>substantial 大量的</li><li>prestigious 有声望的</li><li>anomalous 异常的</li><li>affinity 倾向，偏好，密切关系</li><li>objection 反对</li><li>opaque  难懂的</li><li>pugnacious 好争斗的</li><li>deliberate 深思熟虑</li><li>punctilious 谨慎小心的</li><li>courteous 有礼貌的</li><li>complacent 自我感觉良好的</li><li>truculent 好争斗的</li><li>myraid 大量</li><li>attest 证明</li><li>heterogeneous 组成多样的</li><li>indeterminate 不确定的</li><li>champion 支持</li><li>downplay 轻视</li><li>mercurial 任性多变的</li><li>phlegmatic 冷漠的</li><li>apathetic  漠不关心的</li><li>cunning  狡猾机智的</li><li>blithe 快乐的</li><li>authoritarian 独裁的</li><li>histrionic 不自然的</li><li>megalomania 自大狂</li><li>egalitarian 平等的</li><li>indolent 懒惰的</li><li>charismatic 有魅力的</li><li>prognosis 预测</li><li>auspicious 吉祥的</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;elephantine 巨大的&lt;/li&gt;
&lt;li&gt;ubiquity 笨拙的，无所不在的&lt;/li&gt;
&lt;li&gt;promise 前途，预示&lt;/li&gt;
&lt;li&gt;gainsay 否定，反驳&lt;/li&gt;
&lt;li&gt;sterling 高质量的&lt;/li&gt;
&lt;li&gt;ad hoc 特别的&lt;/li&gt;
&lt;li&gt;anonymous 匿名的 不出名的&lt;/li&gt;
&lt;li&gt;evenhanded 公平的&lt;/li&gt;
&lt;li&gt;confessional 自白的&lt;/li&gt;
&lt;li&gt;amplify 详细阐述，夸大
    
    </summary>
    
    
      <category term="GRE" scheme="http://albuswhite.github.io/blog/categories/GRE/"/>
    
    
      <category term="GRE" scheme="http://albuswhite.github.io/blog/tags/GRE/"/>
    
  </entry>
  
  <entry>
    <title>Verbal1</title>
    <link href="http://albuswhite.github.io/blog/2019/10/10/verbal1/"/>
    <id>http://albuswhite.github.io/blog/2019/10/10/verbal1/</id>
    <published>2019-10-10T09:59:00.151Z</published>
    <updated>2019-10-10T09:59:00.151Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GRE填空常见观点"><a href="#GRE填空常见观点" class="headerlink" title="GRE填空常见观点"></a>GRE填空常见观点</h4><p>(1). 科学实验要客观，公正，可重复，可更正<br>(2). 专利法没有促进创新<br>(3). 物种入侵的危害不大/被夸大<br>(4). 工会(labor union)与资本家(business owner/ management)为敌对关系</p> <a id="more"></a><h4 id="GRE单词归类"><a href="#GRE单词归类" class="headerlink" title="GRE单词归类"></a>GRE单词归类</h4><h5 id="任性多变的"><a href="#任性多变的" class="headerlink" title="任性多变的"></a>任性多变的</h5><p>capricious = inconstant = volatile = mercurial= fickle = flighty = vagarious = wayward</p><h5 id="全面的，详尽的"><a href="#全面的，详尽的" class="headerlink" title="全面的，详尽的"></a>全面的，详尽的</h5><p>comprehensive = exhaustive = inclusive</p><h5 id="根据，就…而言"><a href="#根据，就…而言" class="headerlink" title="根据，就…而言"></a>根据，就…而言</h5><p>in matter of = in terms of = on the part of  = against</p><h5 id="好斗的"><a href="#好斗的" class="headerlink" title="好斗的"></a>好斗的</h5><p>pugnacious</p><h5 id="深奥难懂的"><a href="#深奥难懂的" class="headerlink" title="深奥难懂的"></a>深奥难懂的</h5><p>esotric = elusive = slippery = abstruse = impenetrable =opaque =dense</p><h5 id="阻止"><a href="#阻止" class="headerlink" title="阻止"></a>阻止</h5><p>hinder = stymie =obstruct = hamper =impede</p><h6 id="声称"><a href="#声称" class="headerlink" title="声称"></a>声称</h6><p>proclaim，profess，assert，maintain，aver ，purport</p><h5 id="掩盖"><a href="#掩盖" class="headerlink" title="掩盖"></a>掩盖</h5><p>belie= mask = veil =dissemble =cloak</p><h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h5><p>accentuate =highlight = underscore= foreground</p><h5 id="根深蒂固的"><a href="#根深蒂固的" class="headerlink" title="根深蒂固的"></a>根深蒂固的</h5><p>inveterate= entrenched= ingrained</p><h5 id="拒绝，放弃"><a href="#拒绝，放弃" class="headerlink" title="拒绝，放弃"></a>拒绝，放弃</h5><p>recant= repudiate =renounce = abnegate =disavow</p><h5 id="万能药"><a href="#万能药" class="headerlink" title="万能药"></a>万能药</h5><p>panacea= cure-all =nostrum</p><h5 id="不合理的，站不住脚的"><a href="#不合理的，站不住脚的" class="headerlink" title="不合理的，站不住脚的"></a>不合理的，站不住脚的</h5><p>tenuous=unsound=unfounded=unjustified=untenable=unwarranted=groundless=baseless</p><h5 id="矛盾的，不一致的"><a href="#矛盾的，不一致的" class="headerlink" title="矛盾的，不一致的"></a>矛盾的，不一致的</h5><p>competing=mixed=inconsistent</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;GRE填空常见观点&quot;&gt;&lt;a href=&quot;#GRE填空常见观点&quot; class=&quot;headerlink&quot; title=&quot;GRE填空常见观点&quot;&gt;&lt;/a&gt;GRE填空常见观点&lt;/h4&gt;&lt;p&gt;(1). 科学实验要客观，公正，可重复，可更正&lt;br&gt;(2). 专利法没有促进创新&lt;br&gt;(3). 物种入侵的危害不大/被夸大&lt;br&gt;(4). 工会(labor union)与资本家(business owner/ management)为敌对关系&lt;/p&gt;
    
    </summary>
    
    
      <category term="GRE" scheme="http://albuswhite.github.io/blog/categories/GRE/"/>
    
    
      <category term="GRE" scheme="http://albuswhite.github.io/blog/tags/GRE/"/>
    
  </entry>
  
  <entry>
    <title>Verbal2</title>
    <link href="http://albuswhite.github.io/blog/2019/10/10/Verbal2/"/>
    <id>http://albuswhite.github.io/blog/2019/10/10/Verbal2/</id>
    <published>2019-10-10T09:57:32.464Z</published>
    <updated>2019-10-10T09:57:32.464Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类比题"><a href="#类比题" class="headerlink" title="类比题"></a>类比题</h4><p>Which of the following situations is mostly analogous/simialr to the situation described by the author</p><h4 id="词组例句"><a href="#词组例句" class="headerlink" title="词组例句"></a>词组例句</h4><p>credit A with B                  把B归到A身上<br>could hardly help doing    情不自禁地</p> <a id="more"></a><ol><li>可能猴子产生了更高的皮质醇是因为出生顺序的影响，但是作者的论证不是特别有说服力。</li></ol><p>While it may be true that birth order might make effect on cortisol level, the author’s argument does not make a cogent case for the correlation</p><ol start="2"><li>可能 p 这个地方确实没有船，但是作者的论证不是特别有说服力。</li></ol><p>While it may be true that there is no boat in p, the author does not make a cogent case  in the line of reasoning </p><ol start="3"><li>我们不清楚 Grove college 学生是否都说了实话。</li></ol><p>It’s not clear, however, whether Grove college student hide the truth or not.</p><ol start="4"><li><p>引用 workby 医院的报告，作者表明 ultra clean 洗手液抑菌效果好</p><p>Citing reports of hospital in workby, the author demostrate that ultra clean solution is superior in anti-bacteria effect</p></li><li><p>引用 Grove college 学生的调查，作者暗示 honor code 能有效减少作弊。</p></li></ol><p>Citing survey of Grove college students, the author demostrate that honor code can effectively reduce cheating </p><p>Page 94, 96, 90, 82 </p><h4 id="范文"><a href="#范文" class="headerlink" title="范文"></a>范文</h4><p>In this argument, the author recommends that Monarch books should open up a cafe. (conclusion) In order to support her conclusion, she uses the following evidence : first, Monarch, established there for twenty years, has large customer base; second, building upon a national<br>survey that populations of children under the age of ten have reduced drastically, the author suggests that children’s book seciton could be eliminated for alternative use; third, our competitor , Regal Book, has  recently set up a cafe (evidence) However, here argument is laden with crucial questions unanswered, and therefore, cannot effectively back the author’s claim(instruction)</p><p>(While it may be true that Monarch has large customer base, the author cannot effectively back his argument according to the achievement of the bookstore. Obviouly, the author presumes that those loyalty clients who patronize the books will surely go to the cafe. However, …<br>The mere fact that Monarch has large clients base could back the author’s cliam only if  those customer will frequent the cafe.)</p><p>Even if Monarch has large clients base(premise), it does not necessarily mean that opening up a cafe would achieve the same success(conclusion). Clearly, the author assumes that those clients who pastronize the books will surely go to the cafe if they land chances.(assumption) However, it might be possible  that those customers are so absorb in their books, hardly ever could they squeeze out time to have drinks; or perhaps they just do not like coffee at all, especially considering that the smell of such drink would spread their attention on books; or perhaps they just have their own preferred cafe, rather than frequenting the Monarch, all of if true might seriously undermine the article.  Hence, the author should better provide us evidence regarding that those clients will definiately go to the cafe on a regular basis, then we could stand a better position to evaluate the author’s whole position(specific evidence)</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;类比题&quot;&gt;&lt;a href=&quot;#类比题&quot; class=&quot;headerlink&quot; title=&quot;类比题&quot;&gt;&lt;/a&gt;类比题&lt;/h4&gt;&lt;p&gt;Which of the following situations is mostly analogous/simialr to the situation described by the author&lt;/p&gt;
&lt;h4 id=&quot;词组例句&quot;&gt;&lt;a href=&quot;#词组例句&quot; class=&quot;headerlink&quot; title=&quot;词组例句&quot;&gt;&lt;/a&gt;词组例句&lt;/h4&gt;&lt;p&gt;credit A with B                  把B归到A身上&lt;br&gt;could hardly help doing    情不自禁地&lt;/p&gt;
    
    </summary>
    
    
      <category term="GRE" scheme="http://albuswhite.github.io/blog/categories/GRE/"/>
    
    
      <category term="GRE" scheme="http://albuswhite.github.io/blog/tags/GRE/"/>
    
  </entry>
  
</feed>
